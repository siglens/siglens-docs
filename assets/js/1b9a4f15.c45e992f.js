"use strict";(self.webpackChunksiglens_docs=self.webpackChunksiglens_docs||[]).push([[4334],{9870:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var o=t(5893),r=t(1151),s=t(4866),a=t(5162);const i={},l="AWS Lambda",c={id:"migration/awscloudwatch/aws-lambda",title:"AWS Lambda",description:"Migrating/Stream Logs from AWS CloudWatch to SigLens through AWS Lambda.",source:"@site/docs/migration/awscloudwatch/aws-lambda.md",sourceDirName:"migration/awscloudwatch",slug:"/migration/awscloudwatch/aws-lambda",permalink:"/siglens-docs/migration/awscloudwatch/aws-lambda",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Migrating from AWS CloudWatch",permalink:"/siglens-docs/category/migrating-from-aws-cloudwatch"},next:{title:"Fluentd",permalink:"/siglens-docs/migration/awscloudwatch/fluentd"}},u={},d=[{value:"1. AWS Lambda Function Setup",id:"1-aws-lambda-function-setup",level:3},{value:"Set IAM Permissions",id:"set-iam-permissions",level:4},{value:"2. CloudWatch Trigger Configuration",id:"2-cloudwatch-trigger-configuration",level:3},{value:"3. Environment Variables Setup",id:"3-environment-variables-setup",level:3},{value:"4. Lambda Function Deployment",id:"4-lambda-function-deployment",level:3},{value:"5. Testing and Verification",id:"5-testing-and-verification",level:3}];function g(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"aws-lambda",children:"AWS Lambda"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Migrating/Stream Logs from AWS CloudWatch to SigLens through AWS Lambda."})}),"\n",(0,o.jsx)(n.h3,{id:"1-aws-lambda-function-setup",children:"1. AWS Lambda Function Setup"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Prerequisites"}),": AWS account with logs in CloudWatch Logs Group."]}),"\n",(0,o.jsx)(n.h4,{id:"set-iam-permissions",children:"Set IAM Permissions"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"In AWS Lambda Console, create a new Node.js function."}),"\n",(0,o.jsxs)(n.li,{children:["Assign custom IAM role with permissions:","\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Effect": "Allow",\n            "Action": "logs:CreateLogGroup",\n            "Resource": "*"\n        },\n        {\n            "Effect": "Allow",\n            "Action": [\n                "logs:CreateLogStream",\n                "logs:PutLogEvents"\n            ],\n            "Resource": "*"\n        }\n    ]\n}\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Click ",(0,o.jsx)(n.code,{children:"Create function"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"2-cloudwatch-trigger-configuration",children:"2. CloudWatch Trigger Configuration"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"In your Lambda function, go to Configuration > Triggers."}),"\n",(0,o.jsxs)(n.li,{children:["Click ",(0,o.jsx)(n.code,{children:"Add Trigger"}),", choose ",(0,o.jsx)(n.code,{children:"CloudWatch Logs"})," as the source."]}),"\n",(0,o.jsx)(n.li,{children:"Select your log group, set a Filter name, and an optional Filter-pattern."}),"\n",(0,o.jsxs)(n.li,{children:["Click ",(0,o.jsx)(n.code,{children:"Add"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"3-environment-variables-setup",children:"3. Environment Variables Setup"}),"\n",(0,o.jsx)(n.p,{children:"Configure the following environment variables in your AWS Lambda function:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"SIGLENS_INGEST_URL"}),": Specify the endpoint for log ingestion, for example, ",(0,o.jsx)(n.code,{children:"https://yourhost.com:8081/services/collector/event"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"SIGLENS_TOKEN"}),": This is the ingestion token required for authenticating requests to SigLens. Use this if you are utilizing a SigLens SaaS account. To find your ingestion token, navigate to ",(0,o.jsx)(n.code,{children:"My Org"})," -> ",(0,o.jsx)(n.code,{children:"API Keys"})," -> ",(0,o.jsx)(n.code,{children:"Ingest Token"})," within your SigLens dashboard."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"4-lambda-function-deployment",children:"4. Lambda Function Deployment"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["In the Code section, navigate to ",(0,o.jsx)(n.code,{children:"index.mjs"}),", replace its contents with the below code, and save."]}),"\n",(0,o.jsx)(s.Z,{className:"bg-light",defaultValue:"nodejs",values:[{label:"Node.js",value:"nodejs"}],children:(0,o.jsx)(a.Z,{value:"nodejs",children:(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"index.mjs"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"/**\n * Stream events from AWS CloudWatch Logs to SigLens\n *\n * This function streams AWS CloudWatch Logs to SigLens using\n * the SigLens HTTP event collector API.\n *\n * Define the following Environment Variables in the console below to configure\n * this function to stream logs to your SigLens host:\n *\n * 1. SIGLENS_INGEST_URL: URL address for your SigLens HTTP event collector endpoint.\n * Default port for event collector is 8081. Example: https://host.com:8081/services/collector/event\n *\n * 2. SIGLENS_TOKEN: Token for your SigLens HTTP event collector.\n */\nimport * as zlib from 'node:zlib';\nimport { Logger as SiglensLogger } from './lib/siglenslogger.mjs';\n\nconst loggerConfig = {\n    url: process.env.SIGLENS_INGEST_URL,\n    token: process.env.SIGLENS_TOKEN,\n};\nconst logger = new SiglensLogger(loggerConfig);\n\nexport const handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n\n    // CloudWatch Logs data is base64 encoded so decode here\n    const payload = Buffer.from(event.awslogs.data, 'base64');\n    // CloudWatch Logs are gzip compressed so expand here\n    zlib.gunzip(payload, (err, result) => {\n        if (err) {\n            callback(err);\n        } else {\n            const parsed = JSON.parse(result.toString('ascii'));\n            console.log('Decoded payload:', JSON.stringify(parsed, null, 2));\n            let count = 0;\n            if (parsed.logEvents) {\n                parsed.logEvents.forEach((item) => {\n                    /* Log event to SigLens with explicit event timestamp.\n                    - Use optional 'context' argument to send Lambda metadata e.g. awsRequestId, functionName.\n                    - Change \"item.timestamp\" below if time is specified in another field in the event.\n                    - Change to \"logger.log(item.message, context)\" if no time field is present in event. */\n                    logger.logWithTime(item.timestamp, item.message, context);\n\n                    /* Alternatively, UNCOMMENT logger call below to override default input settings */\n                    /* Log event to SigLens with any combination of explicit timestamp, index, source, sourcetype, and host.*/\n                    // logger.logEvent({\n                    //     timestamp: new Date(item.timestamp).getTime() / 1000,\n                    //     host: 'serverless',\n                    //     source: `lambda:${context.functionName}`,\n                    //     sourcetype: 'httpevent',\n                    //     index: 'main',\n                    //     event: item.message,\n                    // });\n\n                    count += 1;\n                });\n            }\n            // Send all the events in a single batch to SigLens\n            logger.flushAsync((error, response) => {\n                if (error) {\n                    callback(error);\n                } else {\n                    console.log(`Response from SigLens:\\n${response}`);\n                    console.log(`Successfully processed ${count} log event(s).`);\n                    callback(null, count); // Return number of log events\n                }\n            });\n        }\n    });\n};\n\n"})})]})})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Create a ",(0,o.jsx)(n.code,{children:"lib"})," folder and create ",(0,o.jsx)(n.code,{children:"siglenslogger.mjs"})," file inside the ",(0,o.jsx)(n.code,{children:"lib"})," folder, input the below code, and save."]}),"\n",(0,o.jsx)(s.Z,{className:"bg-light",defaultValue:"nodejs",values:[{label:"Node.js",value:"nodejs"}],children:(0,o.jsx)(a.Z,{value:"nodejs",children:(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"lib/siglenslogger.mjs"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"import * as url from 'node:url';\nimport { createRequire } from 'node:module';\n    \nconst require = createRequire(import.meta.url);\n\nconst Logger = function Logger(config) {\n    this.url = config.url;\n    this.token = config.token;\n\n    this.addMetadata = true;\n    this.setSource = true;\n\n    this.parsedUrl = url.parse(this.url);\n    // eslint-disable-next-line import/no-dynamic-require\n    this.requester = require(this.parsedUrl.protocol.substring(0, this.parsedUrl.protocol.length - 1));\n    // Initialize request options which can be overridden & extended by consumer as needed\n    this.requestOptions = {\n        hostname: this.parsedUrl.hostname,\n        path: this.parsedUrl.path,\n        port: this.parsedUrl.port,\n        method: 'POST',\n        headers: {\n            Authorization: `${this.token}`,\n        },\n        rejectUnauthorized: false,\n    };\n\n    this.payloads = [];\n};\n\n// Simple logging API for Lambda functions\nLogger.prototype.log = function log(message, context) {\n    this.logWithTime(Date.now(), message, context);\n};\n\nLogger.prototype.logWithTime = function logWithTime(time, message, context) {\n    const payload = {};\n\n    if (Object.prototype.toString.call(message) === '[object Array]') {\n        throw new Error('message argument must be a string or a JSON object.');\n    }\n    payload.event = message;\n\n    // Add Lambda metadata\n    if (typeof context !== 'undefined') {\n        if (this.addMetadata) {\n            // Enrich event only if it is an object\n            if (message === Object(message)) {\n                payload.event = JSON.parse(JSON.stringify(message)); // deep copy\n                payload.event.awsRequestId = context.awsRequestId;\n            }\n        }\n        if (this.setSource) {\n            payload.source = `lambda:${context.functionName}`;\n        }\n    }\n\n    payload.timestamp = new Date(time).getTime() / 1000;\n\n    this.logEvent(payload);\n};\n\nLogger.prototype.logEvent = function logEvent(payload) {\n    this.payloads.push(JSON.stringify(payload));\n};\n\nLogger.prototype.flushAsync = function flushAsync(callback) {\n    callback = callback || (() => {}); // eslint-disable-line no-param-reassign\n\n    console.log('Sending event(s)');\n    const req = this.requester.request(this.requestOptions, (res) => {\n        res.setEncoding('utf8');\n\n        console.log('Response received');\n        res.on('data', (data) => {\n            let error = null;\n            if (res.statusCode !== 200) {\n                error = new Error(`error: statusCode=${res.statusCode}\\n\\n${data}`);\n                console.error(error);\n            }\n            this.payloads.length = 0;\n            callback(error, data);\n        });\n    });\n\n    req.on('error', (error) => {\n        callback(error);\n    });\n\n    req.end(this.payloads.join(''), 'utf8');\n};\n\nexport { Logger };\n\n"})})]})})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Click ",(0,o.jsx)(n.strong,{children:"Deploy"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"5-testing-and-verification",children:"5. Testing and Verification"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Generate logs in CloudWatch."}),"\n",(0,o.jsx)(n.li,{children:"Wait 10-15 seconds and verify logs in SigLens UI."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},5162:(e,n,t)=>{t.d(n,{Z:()=>a});t(7294);var o=t(6010);const r={tabItem:"tabItem_Ymn6"};var s=t(5893);function a(e){let{children:n,hidden:t,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,a),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>y});var o=t(7294),r=t(6010),s=t(2466),a=t(6550),i=t(469),l=t(1980),c=t(7392),u=t(12);function d(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function g(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:o,default:r}}=e;return{value:n,label:t,attributes:o,default:r}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const r=(0,a.k6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(s),(0,o.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function p(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=g(e),[a,l]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=t.find((e=>e.default))??t[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:s}))),[c,d]=m({queryString:t,groupId:r}),[p,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,u.Nk)(t);return[r,(0,o.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:r}),b=(()=>{const e=c??p;return h({value:e,tabValues:s})?e:null})();(0,i.Z)((()=>{b&&l(b)}),[b]);return{selectedValue:a,selectValue:(0,o.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),f(e)}),[d,f,s]),tabValues:s}}var f=t(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(5893);function x(e){let{className:n,block:t,selectedValue:o,selectValue:a,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),r=i[t].value;r!==o&&(c(n),a(r))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>l.push(e),onKeyDown:d,onClick:u,...s,className:(0,r.Z)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":o===n}),children:t??n},n)}))})}function j(e){let{lazy:n,children:t,selectedValue:r}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===r));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function S(e){const n=p(e);return(0,v.jsxs)("div",{className:(0,r.Z)("tabs-container",b.tabList),children:[(0,v.jsx)(x,{...e,...n}),(0,v.jsx)(j,{...e,...n})]})}function y(e){const n=(0,f.Z)();return(0,v.jsx)(S,{...e,children:d(e.children)},String(n))}},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>a});var o=t(7294);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);