"use strict";(self.webpackChunksiglens_docs=self.webpackChunksiglens_docs||[]).push([[7096],{3941:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=n(5893),t=n(1151);const r={},a="Key Concepts",o={id:"key-concepts",title:"Key Concepts",description:"Observability and monitoring essentially mean keeping a close eye on how systems behave and perform using logs and metrics and are crucial in modern software development and operations. It\u2019s all about understanding, monitoring, and fixing complex systems using data collection, analysis, and visualization. When organizations use observability and monitoring effectively, they can spot and solve problems quickly, improve performance, and ensure their applications and infrastructure run smoothly.",source:"@site/docs/key-concepts.md",sourceDirName:".",slug:"/key-concepts",permalink:"/siglens-docs/key-concepts",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Introduction",permalink:"/siglens-docs/"},next:{title:"Installation",permalink:"/siglens-docs/category/installation"}},l={},c=[{value:"1. Logs \ud83d\udcdd",id:"1-logs-",level:2},{value:"Log ingestion",id:"log-ingestion",level:3},{value:"Collectors",id:"collectors",level:3},{value:"2. Metrics \ud83d\udcca",id:"2-metrics-",level:2},{value:"3. Traces \ud83d\udd0d",id:"3-traces-",level:2},{value:"Instrumentation for traces",id:"instrumentation-for-traces",level:3},{value:"4. Events\ud83d\udc41\ufe0f\u200d\ud83d\udde8\ufe0f",id:"4-events\ufe0f\ufe0f",level:2},{value:"5. DevSecOps\ud83d\udd10",id:"5-devsecops",level:2},{value:"Role of Observability in DevSecOps:",id:"role-of-observability-in-devsecops",level:3},{value:"6. Anomaly Detection and Root Cause Analysis\ud83d\udd0d",id:"6-anomaly-detection-and-root-cause-analysis",level:2},{value:"Anomaly Detection",id:"anomaly-detection",level:3},{value:"Root Cause Analysis",id:"root-cause-analysis",level:3},{value:"7. Alerts\u26a0\ufe0f",id:"7-alerts\ufe0f",level:2},{value:"8. Service Level Objectives (SLOs) and Service Level Indicators (SLIs)\ud83d\udc4d",id:"8-service-level-objectives-slos-and-service-level-indicators-slis",level:2},{value:"Service Level Objectives (SLOs):",id:"service-level-objectives-slos",level:3},{value:"Service Level Indicators (SLIs):",id:"service-level-indicators-slis",level:3},{value:"FAQs\u2753",id:"faqs",level:2}];function d(e){const s={a:"a",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,i.jsx)(s.p,{children:"Observability and monitoring essentially mean keeping a close eye on how systems behave and perform using logs and metrics and are crucial in modern software development and operations. It\u2019s all about understanding, monitoring, and fixing complex systems using data collection, analysis, and visualization. When organizations use observability and monitoring effectively, they can spot and solve problems quickly, improve performance, and ensure their applications and infrastructure run smoothly."}),"\n",(0,i.jsx)(s.p,{children:"The most common type of Observability or Telemetry data that is used within various systems include logs, metrics and traces. These telemetry data are generated by various components within the system, including applications, servers, databases, and networking devices."}),"\n",(0,i.jsxs)(s.p,{children:["In this module, we\u2019ll explore the ",(0,i.jsx)(s.em,{children:(0,i.jsx)(s.strong,{children:"key concepts of observability"})})," and understand how logs and metrics play a crucial role in providing insights into system behaviour and performance."]}),"\n",(0,i.jsx)(s.h2,{id:"1-logs-",children:"1. Logs \ud83d\udcdd"}),"\n",(0,i.jsxs)(s.p,{children:["Logs are simply the ",(0,i.jsx)(s.strong,{children:"records of events"})," or actions that occur within a system. Each log entry typically contains relevant information such as ",(0,i.jsx)(s.strong,{children:"timestamps"}),", ",(0,i.jsx)(s.strong,{children:"event descriptions"}),", ",(0,i.jsx)(s.strong,{children:"severity levels"}),", and ",(0,i.jsx)(s.strong,{children:"contextual data"}),". Logs serve as a detailed history of system activity, providing valuable insights into system behaviour, errors, and performance issues."]}),"\n",(0,i.jsx)(s.p,{children:"These logs are essential for troubleshooting problems, auditing system activity, and understanding user interactions. In software development and operations, logs are generated by various components, including applications, servers, databases, and networking devices."}),"\n",(0,i.jsx)(s.p,{children:"This is what a sample log data in a system would look like."}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Timestamp"}),(0,i.jsx)(s.th,{children:"Event Description"}),(0,i.jsx)(s.th,{children:"Severity"}),(0,i.jsx)(s.th,{children:"Contextual Data"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"2024-02-11T08:35:00Z"}),(0,i.jsx)(s.td,{children:"Application server started successfully"}),(0,i.jsx)(s.td,{children:"INFO"}),(0,i.jsx)(s.td,{children:"Server: app-01, Environment: Production"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"2024-02-11T09:12:45Z"}),(0,i.jsx)(s.td,{children:"Disk usage exceeded threshold"}),(0,i.jsx)(s.td,{children:"WARNING"}),(0,i.jsx)(s.td,{children:"Server: db-03, Disk Usage: 85%, Threshold: 80%"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"2024-02-11T10:20:30Z"}),(0,i.jsx)(s.td,{children:"Critical error in database connection"}),(0,i.jsx)(s.td,{children:"ERROR"}),(0,i.jsx)(s.td,{children:"Server: db-02, Error Code: 500, Connection Timeout"})]})]})]}),"\n",(0,i.jsx)(s.h3,{id:"log-ingestion",children:"Log ingestion"}),"\n",(0,i.jsx)(s.p,{children:"Log ingestion is the process of formatting and uploading log data from external sources into a single point for analysis. Log ingestion systems often support various protocols and formats for data collection, including syslog, JSON, and structured logging."}),"\n",(0,i.jsx)(s.h3,{id:"collectors",children:"Collectors"}),"\n",(0,i.jsx)(s.p,{children:"Collectors are software components responsible for gathering and forwarding data from various sources to a centralized location for processing and storage. Collectors are often used to aggregate logs, metrics, and traces generated by different components within a distributed system."}),"\n",(0,i.jsx)(s.h2,{id:"2-metrics-",children:"2. Metrics \ud83d\udcca"}),"\n",(0,i.jsxs)(s.p,{children:["Metrics are quantitative measurements that provide insight into the ",(0,i.jsx)(s.strong,{children:"performance"})," and ",(0,i.jsx)(s.strong,{children:"health"})," of a system. Unlike logs, which provide detailed event-based information, metrics focus on numerical data points over time. Common metrics include ",(0,i.jsx)(s.strong,{children:"CPU usage"}),", ",(0,i.jsx)(s.strong,{children:"memory utilization"}),", ",(0,i.jsx)(s.strong,{children:"response times"}),", ",(0,i.jsx)(s.strong,{children:"throughput"}),", and ",(0,i.jsx)(s.strong,{children:"error rates"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"Metrics play a vital role in overseeing system performance, pinpointing irregularities, and uncovering patterns that could signify either emerging problems or chances for optimization. These metrics are usually gathered and consolidated from diverse origins within the system, including applications, servers, and infrastructure components."}),"\n",(0,i.jsx)(s.h2,{id:"3-traces-",children:"3. Traces \ud83d\udd0d"}),"\n",(0,i.jsx)(s.p,{children:"Traces are a record of the execution path of a request as it moves through a distributed system. They provide detailed information about each step taken by the request, including timestamps, service interactions, and any errors encountered along the way."}),"\n",(0,i.jsx)(s.p,{children:"Traces help developers and operators understand how requests flow through their systems, making it easier to identify bottlenecks, diagnose problems, and optimize performance."}),"\n",(0,i.jsx)(s.h3,{id:"instrumentation-for-traces",children:"Instrumentation for traces"}),"\n",(0,i.jsxs)(s.p,{children:["Instrumentation for traces involves modifying your code to add specific instructions that capture information about how requests move through your system-specific libraries or frameworks to generate trace data as requests flow through a distributed system. This instrumentation captures details such as request origins, service interactions, and timing information at various points within the system. It typically requires adding ",(0,i.jsx)(s.strong,{children:"code snippets"})," or ",(0,i.jsx)(s.strong,{children:"middleware"})," to applications to generate and propagate trace information across different services. Examples of instrumentation libraries commonly used for tracing include OpenTelemetry, Jaeger, Zipkin, and Datadog APM."]}),"\n",(0,i.jsx)(s.h2,{id:"4-events\ufe0f\ufe0f",children:"4. Events\ud83d\udc41\ufe0f\u200d\ud83d\udde8\ufe0f"}),"\n",(0,i.jsx)(s.p,{children:"Events refer to significant occurrences or actions within a system that are captured and recorded for monitoring, analysis, and processing."}),"\n",(0,i.jsxs)(s.p,{children:["These events can range from routine system operations, such as application startup or shutdown, to ",(0,i.jsx)(s.strong,{children:"critical errors"}),", ",(0,i.jsx)(s.strong,{children:"security breaches"}),", or ",(0,i.jsx)(s.strong,{children:"performance anomalies"}),". By logging events, teams can track system behaviour, identify trends, and respond promptly to issues. Events typically contain information such as ",(0,i.jsx)(s.strong,{children:"timestamps"}),", ",(0,i.jsx)(s.strong,{children:"event descriptions"}),", ",(0,i.jsx)(s.strong,{children:"severity levels"}),", and ",(0,i.jsx)(s.strong,{children:"contextual data"})," to provide insight into what happened and when."]}),"\n",(0,i.jsx)(s.h2,{id:"5-devsecops",children:"5. DevSecOps\ud83d\udd10"}),"\n",(0,i.jsx)(s.p,{children:"DevSecOps is an approach to software development that integrates security practices into the DevOps process as it essentially stands for \u201cDevelopment,\u201d \u201cSecurity,\u201d and \u201cOperations.\u201d It aims to embed security throughout the software development lifecycle (SDLC) rather than treating it as a separate phase."}),"\n",(0,i.jsx)(s.h3,{id:"role-of-observability-in-devsecops",children:"Role of Observability in DevSecOps:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Real-time Visibility"}),": Observability provides real-time visibility into the behaviour and performance of the application and infrastructure components. This visibility allows DevSecOps teams to monitor for security-related events and anomalies continuously."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Detection of Security Incidents"}),": Observability tools can detect security incidents, such as unauthorized access attempts, abnormal behaviour patterns, or suspicious network traffic, by analyzing logs, metrics, and traces."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Forensics and Investigation"}),": In the event of a security breach, observability data can be invaluable for forensic analysis and investigation. It enables teams to trace the root cause of the incident, identify compromised systems, and assess the extent of the damage."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Compliance Monitoring"}),": Observability solutions help ensure compliance with security standards and regulations by providing audit trails, logs, and metrics that demonstrate adherence to security policies and controls."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Feedback Loop"}),": Observability facilitates a feedback loop for continuous improvement in security practices. By analyzing observability data, DevSecOps teams can identify areas for enhancement, refine security policies, and proactively address emerging threats."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"6-anomaly-detection-and-root-cause-analysis",children:"6. Anomaly Detection and Root Cause Analysis\ud83d\udd0d"}),"\n",(0,i.jsx)(s.p,{children:"Anomaly detection and root cause analysis together enable teams to maintain high levels of observability, proactively identify and mitigate issues, and ensure their systems\u2019 smooth and reliable operation."}),"\n",(0,i.jsx)(s.h3,{id:"anomaly-detection",children:"Anomaly Detection"}),"\n",(0,i.jsxs)(s.p,{children:["Anomaly detection in observability means automatically ",(0,i.jsx)(s.strong,{children:"spotting unusual behaviour"})," in a system\u2019s performance data compared to normal patterns. It helps catch potential problems early, like performance slowdowns or security issues."]}),"\n",(0,i.jsx)(s.h3,{id:"root-cause-analysis",children:"Root Cause Analysis"}),"\n",(0,i.jsx)(s.p,{children:"Root cause analysis is about figuring out the exact reasons behind a detected anomaly. It involves examining various system data sources to understand what caused the problem, helping teams fix it effectively and prevent it from happening again."}),"\n",(0,i.jsxs)(s.p,{children:["By continuously monitoring system behaviour and promptly identifying anomalies, organizations can reduce ",(0,i.jsx)(s.strong,{children:"mean time to detect (MTTD)"})," and ",(0,i.jsx)(s.strong,{children:"mean time to resolve (MTTR)"})," critical incidents."]}),"\n",(0,i.jsx)(s.h2,{id:"7-alerts\ufe0f",children:"7. Alerts\u26a0\ufe0f"}),"\n",(0,i.jsx)(s.p,{children:"In practice, alerts are configured based on predefined thresholds or conditions that indicate potential problems or deviations from expected behaviour. These thresholds are typically set for various metrics, such as CPU usage, memory consumption, error rates, response times, and specific events or patterns detected in logs or traces."}),"\n",(0,i.jsx)(s.p,{children:"Once configured, alerts continuously monitor the relevant observability data sources, such as metrics, logs, or events, in real time. When a monitored metric or condition crosses the defined threshold or meets the specified criteria, an alert is triggered. This alert then generates a notification, which can be sent via various communication channels, such as email, SMS, or integration with collaboration tools like Slack or PagerDuty."}),"\n",(0,i.jsx)(s.h2,{id:"8-service-level-objectives-slos-and-service-level-indicators-slis",children:"8. Service Level Objectives (SLOs) and Service Level Indicators (SLIs)\ud83d\udc4d"}),"\n",(0,i.jsx)(s.p,{children:"Service Level Objectives (SLOs) and Service Level Indicators (SLIs) are pivotal elements of observability, aiding teams in defining and evaluating the reliability and performance of their systems."}),"\n",(0,i.jsx)(s.p,{children:"SLOs and SLIs are like performance benchmarks for software. They set clear goals and provide measurable metrics to track the performance of the systems."}),"\n",(0,i.jsx)(s.h3,{id:"service-level-objectives-slos",children:"Service Level Objectives (SLOs):"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"SLOs are precise, measurable targets that specify the acceptable level of reliability and performance for a system or service."}),"\n",(0,i.jsx)(s.li,{children:"They define the desired outcome in terms of user experience or system behaviour and are typically expressed as target values for one or more SLIs."}),"\n",(0,i.jsx)(s.li,{children:"SLOs are crucial for establishing clear expectations and priorities regarding system reliability and performance."}),"\n",(0,i.jsx)(s.li,{children:"They align engineering efforts with business objectives and hold teams accountable for meeting service-level commitments."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"service-level-indicators-slis",children:"Service Level Indicators (SLIs):"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"SLIs are specific, measurable metrics or signals that reflect different aspects of a system behaviour or user experience relevant to overall service reliability and performance."}),"\n",(0,i.jsx)(s.li,{children:"These metrics include availability, latency, throughput, error rates, and other key performance indicators (KPIs) directly impacting user satisfaction and system functionality."}),"\n",(0,i.jsx)(s.li,{children:"SLIs quantify and monitor system performance against defined SLOs, enabling teams to assess if their systems meet reliability and performance goals."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"In observability, SLOs and SLIs contribute directly to the software development lifecycle by defining clear performance goals and providing measurable metrics to track progress. They enable teams to proactively detect and address issues, prioritize development efforts, and continuously optimize system reliability and performance, ultimately leading to better user experiences and business outcomes."}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"faqs",children:"FAQs\u2753"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"1. What are the challenges associated with implementing Observability?"})}),"\n",(0,i.jsx)(s.p,{children:"As these systems grow in size and sophistication, the volume and diversity of data generated by logs, metrics, and traces increase exponentially. Managing, processing, and analyzing this data efficiently with the right tool can be daunting, requiring robust infrastructure and efficient tooling."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"2. How can Observability help in detecting security incidents and ensuring compliance?"})}),"\n",(0,i.jsx)(s.p,{children:"Observability tools can monitor security-related events, anomalies, and unauthorized access attempts. By analyzing logs, metrics, and traces, teams can detect security incidents, investigate breaches, and ensure compliance with security standards and regulations."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"3. What are the best practices for implementing Observability in a distributed system?"})}),"\n",(0,i.jsxs)(s.p,{children:["Best practices include ",(0,i.jsx)(s.strong,{children:"instrumenting applications"})," to generate relevant logs, metrics, and traces, ",(0,i.jsx)(s.strong,{children:"centralizing observability"})," data for easy analysis, ",(0,i.jsx)(s.strong,{children:"leveraging automation"})," to streamline monitoring processes, and fostering a culture of collaboration and shared responsibility among development, operations, and observability teams."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsxs)(s.p,{children:["For any inquiries about observability or to learn more about how ",(0,i.jsx)(s.a,{href:"https://www.siglens.com/",children:"SigLens"})," revolutionizes log management and efficient observability with its advanced MicroIndexing technology, efficient scaling, and comprehensive compatibility, join our ",(0,i.jsx)(s.a,{href:"https://www.siglens.com/slack.html",children:"SigLens Slack community"}),"."]})]})}function h(e={}){const{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>o,a:()=>a});var i=n(7294);const t={},r=i.createContext(t);function a(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);