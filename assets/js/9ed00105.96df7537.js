"use strict";(self.webpackChunksiglens_docs=self.webpackChunksiglens_docs||[]).push([[9004],{8373:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var t=i(5893),s=i(1151);const r={},o="SigLens Configuration Guide",a={id:"configuration",title:"SigLens Configuration Guide",description:"This guide provides a comprehensive overview of SigLens configuration options. SigLens uses a YAML configuration file (server.yaml) to manage its settings.",source:"@site/docs/configuration.md",sourceDirName:".",slug:"/configuration",permalink:"/siglens-docs/configuration",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Cluster Configuration",permalink:"/siglens-docs/retention"},next:{title:"SigLens: Open Source vs Enterprise Edition",permalink:"/siglens-docs/oss-vs-enterprise-features"}},l={},c=[{value:"Basic Configuration",id:"basic-configuration",level:2},{value:"Server Settings",id:"server-settings",level:3},{value:"Data Management",id:"data-management",level:3},{value:"Memory Configuration",id:"memory-configuration",level:2},{value:"Memory Management Features",id:"memory-management-features",level:3},{value:"Performance Settings",id:"performance-settings",level:2},{value:"Feature Flags",id:"feature-flags",level:2},{value:"Security Configuration",id:"security-configuration",level:2},{value:"TLS Configuration",id:"tls-configuration",level:3},{value:"Logging Configuration",id:"logging-configuration",level:2},{value:"Tracing Configuration",id:"tracing-configuration",level:2},{value:"Environment Variables for Tracing",id:"environment-variables-for-tracing",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"siglens-configuration-guide",children:"SigLens Configuration Guide"}),"\n",(0,t.jsxs)(n.p,{children:["This guide provides a comprehensive overview of SigLens configuration options. SigLens uses a YAML configuration file (",(0,t.jsx)(n.code,{children:"server.yaml"}),") to manage its settings.\nThe values shown in this guide represent the default configuration."]}),"\n",(0,t.jsx)(n.h2,{id:"basic-configuration",children:"Basic Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"server-settings",children:"Server Settings"}),"\n",(0,t.jsx)(n.p,{children:"The following settings control the basic server configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# Network settings\ningestListenIP: '0.0.0.0'           # IP address for ingest server to listen on\nqueryListenIP: '0.0.0.0'            # IP address for query server to listen on\ningestPort: 8081                    # Port for receiving data/logs\nqueryPort: 5122                     # Port for handling queries and UI access\n\nqueryHostname: ''                   # The domain name to access SigLens UI\n                                    # Example: If you have DNS configured for logs.company.com\n                                    # pointing to your SigLens server, then set the value \n                                    # to 'logs.company.com:5122'\n                                    #\n                                    # When to use:\n                                    # - Leave empty to access via localhost\n                                    # - Set when using a custom domain with DNS pointing to your SigLens server\n                                    #\n                                    # Note: This setting does not affect where the server runs (it will still \n                                    # run on the configured queryListenIP and queryPort). It only tells SigLens\n                                    # what domain name user will type in their browser to access the service.\n\ningestUrl: ''                       # The URL where clients/applications will send logs to SigLens\n                                    # If empty, defaults to http://localhost:8081\n                                    #\n                                    # Example: If using custom domain with queryHostname 'logs.company.com:5122',\n                                    # set this to 'http://logs.company.com:8081'\n                                    #\n                                    # Note: Make sure to use the same domain as queryHostname to maintain\n                                    # consistency in your setup\n\n# Node configuration\nqueryNode: true                     # Enable query processing capabilities\ningestNode: true                    # Enable data ingestion capabilities\n\nssInstanceName: ''                  # For ephemeral servers (docker, k8s) set this variable to unique\n                                    # container name to persist data across restarts \n                                    # - If left empty: automatically uses system hostname\n                                    # - If set: uses the specified value as instance name (Example: 'sigsingle')\n"})}),"\n",(0,t.jsx)(n.h3,{id:"data-management",children:"Data Management"}),"\n",(0,t.jsx)(n.p,{children:"Configure how SigLens handles data storage and retention:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"dataPath: 'data/'                   # Where to store data files data\nretentionHours: 360                 # How long to keep data (Default: 15 days)\ntimeStampKey: 'timestamp'           # Name of the timestamp field\ndataDiskThresholdPercent: 85        # Stop ingesting data if disk usage exceeds this percentage\nmaxSegFileSize: 4294967296          # Maximum size for data segments (Default: 4GB)\nmaxAllowedColumns: 20000            # Maximum unique column names allowed across all indexes,\n                                    # data ingestion will be rejected if this limit is exceeded\n"})}),"\n",(0,t.jsx)(n.h2,{id:"memory-configuration",children:"Memory Configuration"}),"\n",(0,t.jsx)(n.p,{children:"SigLens implements sophisticated memory management with container awareness:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"memoryConfig:\n  # Set to 0 to auto-detect from system/container limits\n  maxMemoryAllowedToUseInBytes: 0\n\n  # Percentage of available memory SigLens should use (Auto-limited to 50% if system has <8GB RAM )\n  maxUsagePercent: 80\n\n  # Memory distribution (must sum to 100%)\n  searchPercent: 30               # Memory for search operations\n  cmiPercent: 48                  # Memory for column metadata indexes\n  metadataPercent: 20             # Memory for system metadata\n  metricsPercent: 2               # Memory for metrics collection\n\n  # Memory limit per query execution\n  bytesPerQuery: 209715200         # Memory allocation per concurrent query (Default: 200MB)\n                                   # Controls query concurrency: Lower values allow more concurrent queries\n                                   # but may impact complex query performance. Higher values improve complex\n                                   # query performance but reduce max concurrent queries.\n\n  # Enable optimizations for low-memory environments\n  lowMemoryMode: false            # When enabled, reduces memory usage by:\n                                  # - Limiting parallelism to single-threaded \n                                  # Note: May impact query performance\n"})}),"\n",(0,t.jsx)(n.h3,{id:"memory-management-features",children:"Memory Management Features"}),"\n",(0,t.jsx)(n.p,{children:"SigLens implements a hierarchical memory management system:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Memory Limit Detection"})," (in priority order):"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["User-configured limit (",(0,t.jsx)(n.code,{children:"maxMemoryAllowedToUseInBytes"}),") - highest priority"]}),"\n",(0,t.jsx)(n.li,{children:"Container memory limits (via cgroups) - checked if user limit is 0"}),"\n",(0,t.jsx)(n.li,{children:"Host system total memory - fallback if container limits unavailable"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Container Environment Detection"})," (in priority order):"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Automatic detection of cgroup v2"}),"\n",(0,t.jsx)(n.li,{children:"Automatic detection of cgroup v1"}),"\n",(0,t.jsx)(n.li,{children:"Additional Kubernetes-specific paths if running in K8s"}),"\n",(0,t.jsx)(n.li,{children:"Fallback to host system if no container environment detected"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Memory Optimization"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Systems with <8GB RAM automatically limit to 50% usage"}),"\n",(0,t.jsxs)(n.li,{children:["Memory utilization controlled by ",(0,t.jsx)(n.code,{children:"maxUsagePercent"})," (default 80%)"]}),"\n",(0,t.jsxs)(n.li,{children:["Garbage collection tuning via ",(0,t.jsx)(n.code,{children:"GOGC"})," environment variable"]}),"\n",(0,t.jsx)(n.li,{children:"Memory distribution validation (component percentages must sum to 100%)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"performance-settings",children:"Performance Settings"}),"\n",(0,t.jsx)(n.p,{children:"Configure performance-related parameters:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# Work In Progress (WIP) flush intervals\nidleWipFlushIntervalSecs: 5      # How often to flush idle buffers (Range: 5-60 seconds)\nmaxWaitWipFlushIntervalSecs: 30  # Maximum time before forced flush (Range: 5-60 seconds)\n\n# Query execution limits\nqueryTimeoutSecs: 300            # Maximum query execution time (Range: 60-1800 seconds)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"feature-flags",children:"Feature Flags"}),"\n",(0,t.jsx)(n.p,{children:"Enable or disable various SigLens capabilities:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# Development and Debugging\ndebug: false                     # Enable detailed debug logging\npprofEnabled: true               # Enable Go pprof profiling endpoints\nsafeServerStart: false           # Perform additional startup validations\n\n# Query Features\npqsEnabled: true                # Enable Persistent Query Store (saves query history)\nanalyticsEnabled: true          # Enable usage analytics collection\nagileAggsEnabled: true          # Enable optimized aggregation processing\ncompressStatic: true            # Enable compression of static assets\n"})}),"\n",(0,t.jsx)(n.h2,{id:"security-configuration",children:"Security Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"tls-configuration",children:"TLS Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"tls:\n  enabled: false                  # Enable TLS/HTTPS\n  certificatePath: ''             # Path to TLS certificate file\n  privateKeyPath: ''              # Path to private key file\n  mtlsEnabled: false              # Enable mutual TLS; no effect if TLS is disabled\n  clientCaPath: ''                # Path to the client Certificate Authority file. Required for mTLS.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"logging-configuration",children:"Logging Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"log:\n  logPrefix: ''                   # Directory for log files (Example: './logs/')\n  logFileRotationSizeMB: 100      # Size trigger for log rotation\n  compressLogFile: false          # Compress rotated logs\n"})}),"\n",(0,t.jsx)(n.h2,{id:"tracing-configuration",children:"Tracing Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"tracing:\n  serviceName: 'siglens'                            # Service name in traces\n  endpoint: ''                                      # Where to send traces    \n                                                    # (Example: 'http://localhost:5122/otlp/v1/traces')\n  samplingPercentage: 1                             # Percentage of operations to trace (0-100)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"environment-variables-for-tracing",children:"Environment Variables for Tracing"}),"\n",(0,t.jsx)(n.p,{children:"Override tracing configuration using:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TRACESTORE_ENDPOINT"}),": Tracing endpoint URL"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"SIGLENS_TRACING_SERVICE_NAME"}),": Service name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TRACE_SAMPLING_PERCENTAGE"}),": Sampling rate (0-100)"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>o});var t=i(7294);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);