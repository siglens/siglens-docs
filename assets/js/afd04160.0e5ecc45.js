"use strict";(self.webpackChunksiglens_docs=self.webpackChunksiglens_docs||[]).push([[2351],{2524:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var r=t(5893),o=t(1151);const l={},c="OpenTelemetry",i={id:"metric-ingestion/open-telemetry",title:"OpenTelemetry",description:"Ingesting metrics into SigLens using OpenTelemetry",source:"@site/docs/metric-ingestion/open-telemetry.md",sourceDirName:"metric-ingestion",slug:"/metric-ingestion/open-telemetry",permalink:"/siglens-docs/metric-ingestion/open-telemetry",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Vector Metrics",permalink:"/siglens-docs/metric-ingestion/vector-metrics"},next:{title:"Instrumentation for Traces",permalink:"/siglens-docs/category/instrumentation-for-traces"}},s={},m=[{value:"1. Install OpenTelemetry Collector",id:"1-install-opentelemetry-collector",level:3},{value:"2. Configure OpenTelemetry Collector",id:"2-configure-opentelemetry-collector",level:3},{value:"3. Run OpenTelemetry Collector",id:"3-run-opentelemetry-collector",level:3}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"opentelemetry",children:"OpenTelemetry"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Ingesting metrics into SigLens using OpenTelemetry"})}),"\n",(0,r.jsx)(n.h3,{id:"1-install-opentelemetry-collector",children:"1. Install OpenTelemetry Collector"}),"\n",(0,r.jsx)(n.p,{children:"Pull the docker image for OTEL Collector:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker pull otel/opentelemetry-collector\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-configure-opentelemetry-collector",children:"2. Configure OpenTelemetry Collector"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Note: This sample configuration file is for exporting system metrics to SigLens."})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",metastring:'title="otel_collector_config.yaml"',children:'receivers:\n  hostmetrics:\n    collection_interval: 10s\n    scrapers:\n      cpu:\n      memory:\n      disk:\n      network:\n\nexporters:\n  prometheusremotewrite:\n    endpoint: "http://localhost:8081/promql/api/v1/write"\n    # If SigLens is running on the host machine where your OTEL Docker container is running, then use `host.docker.internal:8081`.\n\nprocessors:\n  batch:\n    send_batch_size: 5000\n    timeout: 10s\n\nservice:\n  pipelines:\n    metrics:\n      receivers: [hostmetrics]\n      processors: [batch]\n      exporters: [prometheusremotewrite]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can configure OpenTelemetry to collect different types of metrics according to your needs. For more information on configuring OpenTelemetry, please refer to the ",(0,r.jsx)(n.a,{href:"https://opentelemetry.io/docs/collector/configuration",children:"OpenTelemetry Collector Documentation"})]}),"\n",(0,r.jsx)(n.h3,{id:"3-run-opentelemetry-collector",children:"3. Run OpenTelemetry Collector"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'docker run --rm \\\n  -v "${PWD}/otel_collector_config.yaml:/etc/otel/config.yaml" \\\n  otel/opentelemetry-collector \\\n  --config /etc/otel/config.yaml\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>c});var r=t(7294);const o={},l=r.createContext(o);function c(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);