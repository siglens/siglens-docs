"use strict";(self.webpackChunksiglens_docs=self.webpackChunksiglens_docs||[]).push([[3727],{6028:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});var i=s(5893),r=s(1151);const l={},a="Statistical eval functions",t={id:"spl-docs/evaluation-functions/statistical-functions",title:"Statistical eval functions",description:"The following list contains the evaluation functions that you can use to calculate statistics.",source:"@site/docs/spl-docs/evaluation-functions/statistical-functions.md",sourceDirName:"spl-docs/evaluation-functions",slug:"/spl-docs/evaluation-functions/statistical-functions",permalink:"/siglens-docs/spl-docs/evaluation-functions/statistical-functions",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Multivalue functions",permalink:"/siglens-docs/spl-docs/evaluation-functions/multivalue-functions"},next:{title:"Text functions",permalink:"/siglens-docs/spl-docs/evaluation-functions/text-functions"}},d={},c=[{value:"max(&lt;values&gt;)",id:"maxvalues",level:2},{value:"Usage",id:"usage",level:3},{value:"Example",id:"example",level:3},{value:"Use-Case Example",id:"use-case-example",level:3},{value:"min(&lt;values&gt;)",id:"minvalues",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Use-Case Example",id:"use-case-example-1",level:3},{value:"random()",id:"random",level:2},{value:"Example",id:"example-2",level:3},{value:"Use-Case Example",id:"use-case-example-2",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"statistical-eval-functions",children:"Statistical eval functions"}),"\n",(0,i.jsx)(n.p,{children:"The following list contains the evaluation functions that you can use to calculate statistics."}),"\n",(0,i.jsx)(n.h2,{id:"maxvalues",children:"max(<values>)"}),"\n",(0,i.jsx)(n.p,{children:"This function takes one or more numeric or string values and returns the maximum value. Strings are greater than numbers."}),"\n",(0,i.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"<values>"})," argument can be a list of strings or numbers or a field name."]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["The following example returns either ",(0,i.jsx)(n.code,{children:'"foo"'})," or the value in the ",(0,i.jsx)(n.code,{children:"name"})," field. Splunk searches use lexicographical order, where numbers are sorted before letters. If the value in the ",(0,i.jsx)(n.code,{children:"name"})," field is ",(0,i.jsx)(n.code,{children:'"baz"'}),", then ",(0,i.jsx)(n.code,{children:'"foo"'})," is returned. If the value in the ",(0,i.jsx)(n.code,{children:"name"})," field is ",(0,i.jsx)(n.code,{children:'"zaz"'}),", then ",(0,i.jsx)(n.code,{children:'"zaz"'})," is returned."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'... | eval n=max(1, 3, 6, 7, "foo", name)\n'})}),"\n",(0,i.jsx)(n.p,{children:"This example returns the maximum value in a multivalue field."}),"\n",(0,i.jsxs)(n.p,{children:["The following search creates a field called ",(0,i.jsx)(n.code,{children:"n"})," with a single value, which is a series of numbers. The ",(0,i.jsx)(n.code,{children:"makemv"})," command is used to make the single value into multiple values, each of which appears on its own row in the results. Another new field called ",(0,i.jsx)(n.code,{children:"maxn"})," is created which takes the values in ",(0,i.jsx)(n.code,{children:"n"})," and returns the maximum value, ",(0,i.jsx)(n.code,{children:"6"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'... | eval n = "1 3 5 6 4 2" | makemv n | eval maxn = max(n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"use-case-example",children:"Use-Case Example"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Identify the maximum CPU utilization per minute per server"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," A user wants to identify the maximum CPU utilization recorded every minute for each server. The ",(0,i.jsx)(n.code,{children:"cpu_usage"})," field is a string of CPU usage measurements taken every 10 seconds within that minute, separated by commas."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution:"})," The ",(0,i.jsx)(n.code,{children:"max()"})," command within an ",(0,i.jsx)(n.code,{children:"eval"})," function can be used to find the maximum CPU utilization value from the string."]}),"\n",(0,i.jsx)(n.p,{children:"Assume the ingested data format is like this per minute across different servers:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'server,time,cpu_usage  // fields\nserver1,1720350000,"50,85,90,70,85,100"\nserver2,1720350000,"70,90,99,85,60,70"\nserver1,1720350060,"105,90,87,99,90,80"\nserver2,1720350060,"75,89,80,70,75,80"\n'})}),"\n",(0,i.jsx)(n.p,{children:"For the above data, the query will be:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'index=server_metrics sourcetype=cpu_usage\n| makemv delim="," cpu_usage\n| eval max_cpu_per_min = max(cpu_usage)\n| fields server, time, max_cpu_per_min\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"makemv"})," command is used to split the ",(0,i.jsx)(n.code,{children:"cpu_usage"}),' string into multiple values based on the delimiter ",".']}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"eval"})," command uses the ",(0,i.jsx)(n.code,{children:"max()"})," function to calculate the maximum CPU utilization value from the ",(0,i.jsx)(n.code,{children:"cpu_usage"})," values."]}),"\n",(0,i.jsxs)(n.li,{children:["The result is stored in a new field called ",(0,i.jsx)(n.code,{children:"max_cpu_per_min"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"fields"})," command selects the relevant fields (",(0,i.jsx)(n.code,{children:"server"}),", ",(0,i.jsx)(n.code,{children:"time"}),", ",(0,i.jsx)(n.code,{children:"max_cpu_per_min"}),") for output."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.p,{children:"The output for the above command based on the above-mentioned data would look like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"server    time         max_cpu_per_min\nserver1   1720350000   100\nserver2   1720350000   99\nserver1   1720350060   105\nserver2   1720350060   89\n"})}),"\n",(0,i.jsx)(n.h2,{id:"minvalues",children:"min(<values>)"}),"\n",(0,i.jsx)(n.p,{children:"This function takes one or more numeric or string values and returns the minimum value. Strings are greater than numbers."}),"\n",(0,i.jsx)(n.h3,{id:"usage-1",children:"Usage"}),"\n",(0,i.jsxs)(n.p,{children:["The each element in ",(0,i.jsx)(n.code,{children:"<values>"})," argument can be a literal string, literal number, or a field name."]}),"\n",(0,i.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["The following example returns either ",(0,i.jsx)(n.code,{children:"3"})," or the value in the ",(0,i.jsx)(n.code,{children:"size"})," field. Splunk searches use lexicographical order, where numbers are sorted before letters. If the value in the ",(0,i.jsx)(n.code,{children:"size"})," field is ",(0,i.jsx)(n.code,{children:"9"}),", then ",(0,i.jsx)(n.code,{children:"3"})," is returned. If the value in the ",(0,i.jsx)(n.code,{children:"size"})," field is ",(0,i.jsx)(n.code,{children:"1"}),", then ",(0,i.jsx)(n.code,{children:"1"})," is returned."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'... | eval n=min(3, 6, 7, "maria", size)\n'})}),"\n",(0,i.jsx)(n.p,{children:"The following example returns the minimum value in a multivalue field."}),"\n",(0,i.jsxs)(n.p,{children:["This search creates a field called ",(0,i.jsx)(n.code,{children:"n"})," with a single value, which is a series of numbers. The ",(0,i.jsx)(n.code,{children:"makemv"})," command is used to make the single value into multiple values, each of which appears on it's own row in the results. Another new field called ",(0,i.jsx)(n.code,{children:"minn"})," is created which takes the values in ",(0,i.jsx)(n.code,{children:"n"})," and returns the minimum value, ",(0,i.jsx)(n.code,{children:"2"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'... | eval n = "3 5 6 4 7 2" | makemv n | eval minn = min(n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"use-case-example-1",children:"Use-Case Example"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Identify the minimum CPU utilization per minute per server"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," A user wants to identify the minimum CPU utilization recorded every minute for each server. The ",(0,i.jsx)(n.code,{children:"cpu_usage"})," field is a string of CPU usage measurements taken every 10 seconds within that minute, separated by commas."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution:"})," The ",(0,i.jsx)(n.code,{children:"min()"})," command within an ",(0,i.jsx)(n.code,{children:"eval"})," function can be used to find the minimum CPU utilization value from the string."]}),"\n",(0,i.jsx)(n.p,{children:"Assume the ingested data format is like this per minute across different servers:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'server,time,cpu_usage  // fields\nserver1,1720350000,"50,85,90,70,85,100"\nserver2,1720350000,"70,90,99,85,60,70"\nserver1,1720350060,"105,90,87,99,90,80"\nserver2,1720350060,"75,89,80,70,75,80"\n'})}),"\n",(0,i.jsx)(n.p,{children:"For the above data, the query will be:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'index=server_metrics sourcetype=cpu_usage\n| makemv delim="," cpu_usage\n| eval min_cpu_per_min = min(cpu_usage)\n| fields server, time, min_cpu_per_min\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"makemv"})," command is used to split the ",(0,i.jsx)(n.code,{children:"cpu_usage"}),' string into multiple values based on the delimiter ",".']}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"eval"})," command uses the ",(0,i.jsx)(n.code,{children:"min()"})," function to calculate the minimum CPU utilization value from the ",(0,i.jsx)(n.code,{children:"cpu_usage"})," values."]}),"\n",(0,i.jsxs)(n.li,{children:["The result is stored in a new field called ",(0,i.jsx)(n.code,{children:"min_cpu_per_min"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"fields"})," command selects the relevant fields (",(0,i.jsx)(n.code,{children:"server"}),", ",(0,i.jsx)(n.code,{children:"time"}),", ",(0,i.jsx)(n.code,{children:"min_cpu_per_min"}),") for output."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.p,{children:"The output for the above command based on the above-mentioned data would look like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"server    time         min_cpu_per_min\nserver1   1720350000   50\nserver2   1720350000   60\nserver1   1720350060   80\nserver2   1720350060   70\n"})}),"\n",(0,i.jsx)(n.h2,{id:"random",children:"random()"}),"\n",(0,i.jsxs)(n.p,{children:["This function returns a pseudo-random integer ranging from ",(0,i.jsx)(n.code,{children:"0 to (2^31)-1"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"The following example returns a random integer, such as 0...2147483647."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"... | eval n=random()\n"})}),"\n",(0,i.jsx)(n.p,{children:"The following example returns a random number within a specified range. In this example the random number is between 1 and 100,000."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"... | eval n=(random() % 100000) + 1\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This example takes a random number and uses the modulo mathematical operator ",(0,i.jsx)(n.code,{children:"( % )"})," to divide the random number by ",(0,i.jsx)(n.code,{children:"100000"}),". This ensures that the random number returned is not greater than ",(0,i.jsx)(n.code,{children:"100000"}),". The number remaining after the division is increased by ",(0,i.jsx)(n.code,{children:"1"})," to ensure that the number is at least greater than or equal to ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"use-case-example-2",children:"Use-Case Example"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Randomly sample data for performance analysis"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," A user wants to perform an analysis on data for a certain time frame, but the dataset is too large, making the analysis time-consuming. The user needs to randomly select a small percentage of records within that time frame for a quicker analysis."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution:"})," The ",(0,i.jsx)(n.code,{children:"random()"})," command within an ",(0,i.jsx)(n.code,{children:"eval"})," function can be used to randomly sample a subset of the data."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"index=large_dataset\n| eval sample_flag = if(random() % 100 < 10, 1, 0)\n| where sample_flag = 1\n| fields - sample_flag\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"eval"})," command uses the ",(0,i.jsx)(n.code,{children:"random()"})," function to generate a random integer. The modulo operator (",(0,i.jsx)(n.code,{children:"%"}),") is used to determine if the record should be flagged for sampling."]}),"\n",(0,i.jsxs)(n.li,{children:["The condition ",(0,i.jsx)(n.code,{children:"random() % 100 < 10"})," flags approximately 10% of the records (randomly selected) by setting ",(0,i.jsx)(n.code,{children:"sample_flag"})," to 1."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"where"})," command filters the dataset to include only the records where ",(0,i.jsx)(n.code,{children:"sample_flag"})," is 1."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"fields - sample_flag"})," command removes the ",(0,i.jsx)(n.code,{children:"sample_flag"})," field from the output, keeping the dataset clean."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This approach allows the user to quickly perform an analysis on a random sample of the data, reducing the time required for processing large datasets."})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>t,a:()=>a});var i=s(7294);const r={},l=i.createContext(r);function a(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);