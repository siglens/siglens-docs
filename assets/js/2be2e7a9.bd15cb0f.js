"use strict";(self.webpackChunksiglens_docs=self.webpackChunksiglens_docs||[]).push([[1827],{1384:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>c});var s=i(5893),l=i(1151);const t={},r="Multivalue functions",d={id:"spl-docs/evaluation-functions/multivalue-functions",title:"Multivalue functions",description:"This list includes functions that can be used to return multivalue fields or can operate on multivalue fields.",source:"@site/docs/spl-docs/evaluation-functions/multivalue-functions.md",sourceDirName:"spl-docs/evaluation-functions",slug:"/spl-docs/evaluation-functions/multivalue-functions",permalink:"/siglens-docs/spl-docs/evaluation-functions/multivalue-functions",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Mathematical Functions",permalink:"/siglens-docs/spl-docs/evaluation-functions/mathematical-functions"},next:{title:"Statistical eval functions",permalink:"/siglens-docs/spl-docs/evaluation-functions/statistical-functions"}},a={},c=[{value:"split(&lt;str&gt;, &lt;delim&gt;)",id:"splitstr-delim",level:2},{value:"Usage",id:"usage",level:4},{value:"Example",id:"example",level:3},{value:"Use-Case Example",id:"use-case-example",level:3},{value:"mvindex(&lt;mv&gt;, &lt;start&gt;, &lt;end&gt;)",id:"mvindexmv-start-end",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Indexing Details",id:"indexing-details",level:3},{value:"Example",id:"example-1",level:3},{value:"Use-Case Example",id:"use-case-example-1",level:3},{value:"mvcount(&lt;mv&gt;)",id:"mvcountmv",level:2},{value:"Usage",id:"usage-2",level:3},{value:"Function Behavior",id:"function-behavior",level:3},{value:"Example",id:"example-2",level:3},{value:"Use-Case Example",id:"use-case-example-2",level:3},{value:"mvdedup(&lt;mv&gt;)",id:"mvdedupmv",level:2},{value:"Usage",id:"usage-3",level:4},{value:"Example",id:"example-3",level:3},{value:"Use-Case Example",id:"use-case-example-3",level:3},{value:"mvfind(&lt;mv&gt;, &lt;regex&gt;)",id:"mvfindmv-regex",level:2},{value:"Usage",id:"usage-4",level:3},{value:"Function Behavior",id:"function-behavior-1",level:3},{value:"Example",id:"example-4",level:3},{value:"Use-Case Example",id:"use-case-example-4",level:3},{value:"mvjoin(&lt;mv&gt;, &lt;delim&gt;)",id:"mvjoinmv-delim",level:2},{value:"Usage",id:"usage-5",level:3},{value:"Function Behavior",id:"function-behavior-2",level:3},{value:"Example",id:"example-5",level:3},{value:"Use-Case Example",id:"use-case-example-5",level:3},{value:"mvsort(&lt;mv&gt;)",id:"mvsortmv",level:2},{value:"Usage",id:"usage-6",level:4},{value:"Example",id:"example-6",level:3},{value:"Use-Case Example",id:"use-case-example-6",level:3},{value:"mvappend(&lt;values&gt;)",id:"mvappendvalues",level:2},{value:"Description",id:"description",level:3},{value:"Usage",id:"usage-7",level:3},{value:"Basic examples",id:"basic-examples",level:3},{value:"mvzip(&lt;mv_left&gt;, &lt;mv_right&gt;, &lt;delim&gt;)",id:"mvzipmv_left-mv_right-delim",level:2},{value:"Usage",id:"usage-8",level:4},{value:"Example",id:"example-7",level:3},{value:"Use-Case Example",id:"use-case-example-7",level:3},{value:"mvfilter(&lt;predicate&gt;)",id:"mvfilterpredicate",level:2},{value:"Usage",id:"usage-9",level:3},{value:"Function Behavior",id:"function-behavior-3",level:3},{value:"Example",id:"example-8",level:3},{value:"Use-Case Example",id:"use-case-example-8",level:3},{value:"mv_to_json_array(&lt;mv&gt;, &lt;infer_types&gt;)",id:"mv_to_json_arraymv-infer_types",level:2},{value:"Usage",id:"usage-10",level:3},{value:"Function Behavior",id:"function-behavior-4",level:3},{value:"Example",id:"example-9",level:3},{value:"Use-Case Example",id:"use-case-example-9",level:3}];function o(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"multivalue-functions",children:"Multivalue functions"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"This list includes functions that can be used to return multivalue fields or can operate on multivalue fields."})}),"\n",(0,s.jsx)(n.h2,{id:"splitstr-delim",children:"split(<str>, <delim>)"}),"\n",(0,s.jsxs)(n.p,{children:["This function splits ",(0,s.jsx)(n.code,{children:"<str>"})," with the delimiter ",(0,s.jsx)(n.code,{children:"<delim>"})," and return these parts as a multivalue field."]}),"\n",(0,s.jsx)(n.h4,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<str>"})," can be a string literal or a field name."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<delim>"})," is a string literal specifying the delimiter."]}),"\n",(0,s.jsx)(n.li,{children:"You can use this function with an eval command."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["The following command returns the split parts of the given string as a multivalue field fruits having values ",(0,s.jsx)(n.code,{children:"apple"}),", ",(0,s.jsx)(n.code,{children:"banana"}),", ",(0,s.jsx)(n.code,{children:"mango"})," and ",(0,s.jsx)(n.code,{children:"kiwi"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval fruits=split("apple:banana:mango:kiwi", ":")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"use-case-example",children:"Use-Case Example"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Extracting Email Recipients from Logs"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem:"})," In email transaction logs, recipient addresses are often stored in a single string, separated by semicolons. Analyzing individual recipient behavior or response rates requires splitting these strings into separate values for each recipient."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution:"})," To efficiently extract individual email recipients from log entries, a command can be used to analyze the ",(0,s.jsx)(n.code,{children:"recipients"})," field in the dataset. This command employs the ",(0,s.jsx)(n.code,{children:"eval"})," function combined with the ",(0,s.jsx)(n.code,{children:"split"})," function to separate the recipient addresses into a multivalue field."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval email_list=split(recipients, ";")\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"eval"})," function creates a new field named ",(0,s.jsx)(n.code,{children:"email_list"}),", which will contain the separated email addresses as individual values."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"split"})," function is used to divide the ",(0,s.jsx)(n.code,{children:"recipients"})," string into separate email addresses based on the semicolon (",(0,s.jsx)(n.code,{children:";"}),") delimiter."]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For example, if ",(0,s.jsx)(n.code,{children:"recipients"})," contains ",(0,s.jsx)(n.code,{children:"user1@example.com;user2@example.com;user3@example.com"}),", the ",(0,s.jsx)(n.code,{children:"split"})," function will create an ",(0,s.jsx)(n.code,{children:"email_list"})," multivalue field with three separate values: ",(0,s.jsx)(n.code,{children:"user1@example.com"}),", ",(0,s.jsx)(n.code,{children:"user2@example.com"}),", and ",(0,s.jsx)(n.code,{children:"user3@example.com"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This method allows for detailed analysis of email logs, such as calculating response rates or identifying recipient engagement, by treating each recipient address as an individual entity."}),"\n",(0,s.jsx)(n.h2,{id:"mvindexmv-start-end",children:"mvindex(<mv>, <start>, <end>)"}),"\n",(0,s.jsx)(n.p,{children:"This function extracts a specific subset of values from a multivalue field based on the provided start and end index positions."}),"\n",(0,s.jsx)(n.h3,{id:"usage-1",children:"Usage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"<mv>"})," parameter must be a multivalue field and ",(0,s.jsx)(n.code,{children:"<start>"})," and ",(0,s.jsx)(n.code,{children:"<end>"})," must be numbers."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"<start>"})," parameter is required and indicates the starting index of the value(s) you want to extract."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"<end>"})," parameter is optional. If provided, it defines the ending index, and the function will return all values between ",(0,s.jsx)(n.code,{children:"<start>"})," and ",(0,s.jsx)(n.code,{children:"<end>"}),", inclusive."]}),"\n",(0,s.jsxs)(n.li,{children:["If you don't provide an ",(0,s.jsx)(n.code,{children:"<end>"})," index, the function does not assume a range; it simply returns the value at the start index."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"indexing-details",children:"Indexing Details"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Indexes begin at 0, meaning the first item in a list is at position 0, the second at position 1, and so on."}),"\n",(0,s.jsxs)(n.li,{children:["If only ",(0,s.jsx)(n.code,{children:"<start>"})," is specified, the function returns the value at that position."]}),"\n",(0,s.jsxs)(n.li,{children:["If both ",(0,s.jsx)(n.code,{children:"<start>"})," and ",(0,s.jsx)(n.code,{children:"<end>"})," are specified, the function returns all values from ",(0,s.jsx)(n.code,{children:"<start>"})," to ",(0,s.jsx)(n.code,{children:"<end>"}),", inclusive of the item at ",(0,s.jsx)(n.code,{children:"<end>"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Negative indexes are supported, where ",(0,s.jsx)(n.code,{children:"-1"})," refers to the last value in the list, ",(0,s.jsx)(n.code,{children:"-2"})," to the second last, and so forth."]}),"\n",(0,s.jsxs)(n.li,{children:["If the indexes provided are out of range or invalid, the function returns ",(0,s.jsx)(n.code,{children:"NULL"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["Suppose you have a multivalue field called ",(0,s.jsx)(n.code,{children:"cities"})," containing the following values:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"New York, London, Paris, Tokyo, Sydney, Berlin, Dubai\n"})}),"\n",(0,s.jsx)(n.p,{children:"To extract the third city in the list (Paris), use:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"... | eval selected_city=mvindex(cities,2)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This command will set ",(0,s.jsx)(n.code,{children:"selected_city"})," to ",(0,s.jsx)(n.code,{children:"Paris"}),". When you use ",(0,s.jsx)(n.code,{children:"mvindex"})," to extract a single item, it returns that item as a normal value instead of a multivalue field containing one item."]}),"\n",(0,s.jsx)(n.p,{children:"To get a range of cities, say from the second to the fourth city (London to Tokyo), use:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"... | eval city_range=mvindex(cities,1,3)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The result for ",(0,s.jsx)(n.code,{children:"city_range"})," will be ",(0,s.jsx)(n.code,{children:"London, Paris, Tokyo"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"use-case-example-1",children:"Use-Case Example"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Selecting Items from Log Data"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem:"})," Suppose you're analyzing log data where multiple status codes are recorded as a list in a single event. You need to extract specific status codes, such as the first few or the last few, for further analysis."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution:"})," The ",(0,s.jsx)(n.code,{children:"mvindex"})," function can help isolate these specific status codes based on their position in the multivalue field."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"... | eval selected_status=mvindex(status_codes, 0, 2)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"eval"})," command creates a new field called ",(0,s.jsx)(n.code,{children:"selected_status"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"mvindex"})," function is used to extract the first three status codes (index 0 to 2) from the ",(0,s.jsx)(n.code,{children:"status_codes"})," field."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This approach is useful for focusing on specific subsets of data within multivalue fields, such as analyzing the most recent status updates or filtering based on priority."}),"\n",(0,s.jsx)(n.h2,{id:"mvcountmv",children:"mvcount(<mv>)"}),"\n",(0,s.jsx)(n.p,{children:"This function calculates the number of values within a multivalue field and returns this count as a single value."}),"\n",(0,s.jsx)(n.h3,{id:"usage-2",children:"Usage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"<mv>"})," parameter is a multivalue field that contains the values you want to count."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"function-behavior",children:"Function Behavior"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If the multivalue field contains multiple values, this function returns the total count of those values."}),"\n",(0,s.jsx)(n.li,{children:"If the field contains a single value, the function returns 1."}),"\n",(0,s.jsxs)(n.li,{children:["If the field is empty, the function returns 0. If the field does not exist, ",(0,s.jsx)(n.code,{children:"mvcount"})," is not applied to the field and produces no output."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["Consider a multivalue field ",(0,s.jsx)(n.code,{children:"colors"})," with the following values:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"red, green, blue, yellow\n"})}),"\n",(0,s.jsx)(n.p,{children:"To count the number of colors in this field, you would use:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"... | eval color_count=mvcount(colors)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The result for ",(0,s.jsx)(n.code,{children:"color_count"})," will be ",(0,s.jsx)(n.code,{children:"4"}),", as there are four values in the ",(0,s.jsx)(n.code,{children:"colors"})," field."]}),"\n",(0,s.jsx)(n.h3,{id:"use-case-example-2",children:"Use-Case Example"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Counting User Interactions in Log Data"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem:"})," You have log data where each event lists the actions a user has taken during a session, stored in a multivalue field. You need to know how many distinct actions were taken in each session."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution:"})," The ",(0,s.jsx)(n.code,{children:"mvcount"})," function can be used to count the number of actions recorded in the multivalue field for each session."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"... | eval action_count=mvcount(user_actions)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"eval"})," command creates a new field called ",(0,s.jsx)(n.code,{children:"action_count"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"mvcount"})," function counts the number of distinct actions in the ",(0,s.jsx)(n.code,{children:"user_actions"})," field."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This method allows you to easily track the number of interactions or actions taken by users in each session, providing insights into user engagement or system utilization."}),"\n",(0,s.jsx)(n.h2,{id:"mvdedupmv",children:"mvdedup(<mv>)"}),"\n",(0,s.jsx)(n.p,{children:"This function takes a multivalue field and returns a new multivalue field with duplicate values removed, preserving the original order of first occurrences."}),"\n",(0,s.jsx)(n.h4,{id:"usage-3",children:"Usage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<mv>"})," must be a multivalue field generated by another function (e.g., ",(0,s.jsx)(n.code,{children:"split()"}),", ",(0,s.jsx)(n.code,{children:"mvappend()"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["You can use this function with the ",(0,s.jsx)(n.code,{children:"eval"})," and ",(0,s.jsx)(n.code,{children:"where"})," commands."]}),"\n",(0,s.jsx)(n.li,{children:"Duplicate entries are eliminated; only the first instance of each value is kept."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["The following command removes duplicate entries from the ",(0,s.jsx)(n.code,{children:"tags"})," field:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval unique_tags = mvdedup(split("error,warning,error,info,warning", ","))\n'})}),"\n",(0,s.jsx)(n.h3,{id:"use-case-example-3",children:"Use-Case Example"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Cleaning Up Log Tags for Accurate Reporting"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem:"})," In application logs, the ",(0,s.jsx)(n.code,{children:"tags"})," field may include repeated labels such as ",(0,s.jsx)(n.code,{children:'"error","error","warning","info","warning"'}),". These duplicates can inflate statistics or clutter dashboards."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution:"})," Apply the ",(0,s.jsx)(n.code,{children:"mvdedup"})," function to eliminate repeated values, keeping only unique tag entries in the order they appeared."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval raw_tags=split(tags, ",")\n    | eval clean_tags=mvdedup(raw_tags)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'split(tags, ",")'})," creates a multivalue field from a comma-separated list."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mvdedup(raw_tags)"})," removes all but the first occurrence of each value."]}),"\n",(0,s.jsx)(n.li,{children:"The result is a cleaned multivalue field: only distinct tag values remain."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"mvfindmv-regex",children:"mvfind(<mv>, <regex>)"}),"\n",(0,s.jsx)(n.p,{children:"This function searches through a multivalue field to find the first value that matches a given regular expression and returns the index of that match. The index starts at zero. If no match is found, the function does not return anything."}),"\n",(0,s.jsx)(n.h3,{id:"usage-4",children:"Usage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"<mv>"})," parameter is the multivalue field you want to search through."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"<regex>"})," parameter is the regular expression pattern used to search for a match."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"function-behavior-1",children:"Function Behavior"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The function returns the index of the first value in the multivalue field that matches the regular expression."}),"\n",(0,s.jsx)(n.li,{children:"Indexes begin at 0, so the first value in the field has an index of 0, the second has an index of 1, and so on."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-4",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["Suppose you have a multivalue field ",(0,s.jsx)(n.code,{children:"error_codes"})," with the following values:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"error101, warning202, error305, info404\n"})}),"\n",(0,s.jsx)(n.p,{children:'To find the index of the first value that starts with "error", you would use:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval error_index=mvfind(error_codes, "^error")\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The result for ",(0,s.jsx)(n.code,{children:"error_index"})," will be ",(0,s.jsx)(n.code,{children:"0"}),', as "error101" is the first match.']}),"\n",(0,s.jsx)(n.h3,{id:"use-case-example-4",children:"Use-Case Example"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Identifying Specific Error Patterns in Log Data"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem:"})," You are analyzing system logs that contain various status messages, and you need to quickly identify the first occurrence of a specific type of error within each log event."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution:"})," The ",(0,s.jsx)(n.code,{children:"mvfind"})," function can help you find the position of a specific error pattern within a multivalue field that lists all messages for an event."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval first_error_index=mvfind(log_messages, "ERROR\\d{3}")\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"eval"})," command creates a new field called ",(0,s.jsx)(n.code,{children:"first_error_index"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"mvfind"})," function searches through the ",(0,s.jsx)(n.code,{children:"log_messages"})," field to find the first occurrence of a pattern that matches ",(0,s.jsx)(n.code,{children:"ERROR"})," followed by three digits."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This method is useful for pinpointing the position of significant error messages in log data, enabling quick identification and response to critical issues."}),"\n",(0,s.jsx)(n.h2,{id:"mvjoinmv-delim",children:"mvjoin(<mv>, <delim>)"}),"\n",(0,s.jsx)(n.p,{children:"This function takes a multivalue field and a specified delimiter, concatenating the individual values within the multivalue field into a single string, with the delimiter separating each value."}),"\n",(0,s.jsx)(n.h3,{id:"usage-5",children:"Usage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"<mv>"})," parameter is the multivalue field containing the values you want to join."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"<delim>"})," parameter is a string that will be used to separate each value in the resulting single value field."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"function-behavior-2",children:"Function Behavior"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The function returns a single string where each value from the multivalue field is separated by the specified delimiter."}),"\n",(0,s.jsx)(n.li,{children:"This is useful when you want to create a unified string representation of a multivalue field."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-5",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["Consider a multivalue field ",(0,s.jsx)(n.code,{children:"numbers"})," with the following values:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"1, 2, 3, 4, 5\n"})}),"\n",(0,s.jsx)(n.p,{children:'To join these numbers into a single string with "AND" as the delimiter, you would use:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval joined_numbers=mvjoin(numbers, " AND ")\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The result for ",(0,s.jsx)(n.code,{children:"joined_numbers"})," will be ",(0,s.jsx)(n.code,{children:"1 AND 2 AND 3 AND 4 AND 5"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"use-case-example-5",children:"Use-Case Example"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Creating Search Queries from User Selections"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem:"})," You have a multivalue field where users have selected various options in a form, and you need to create a search query that includes all selected options, separated by ",(0,s.jsx)(n.code,{children:"OR"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution:"})," The ",(0,s.jsx)(n.code,{children:"mvjoin"})," function can be used to concatenate all selected options into a single search query string."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval search_query=mvjoin(selected_options, " OR ")\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"eval"})," command creates a new field called ",(0,s.jsx)(n.code,{children:"search_query"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"mvjoin"})," function joins all selected options from the ",(0,s.jsx)(n.code,{children:"selected_options"}),' field into a single string, using "OR" as the delimiter.']}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This approach is particularly useful for dynamically generating complex search queries based on user input, ensuring that all selected options are included in the query."}),"\n",(0,s.jsx)(n.h2,{id:"mvsortmv",children:"mvsort(<mv>)"}),"\n",(0,s.jsx)(n.p,{children:"This function takes a multivalue field and returns a new multivalue field with its values sorted lexicographically."}),"\n",(0,s.jsx)(n.h4,{id:"usage-6",children:"Usage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<mv>"})," must be a multivalue field, such as the result of a function like ",(0,s.jsx)(n.code,{children:"split()"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Sorting is lexicographic: values are compared by byte order in UTF-8 encoding.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Numbers are sorted before letters."}),"\n",(0,s.jsx)(n.li,{children:"Uppercase letters precede lowercase letters."}),"\n",(0,s.jsx)(n.li,{children:"Symbols are sorted depending on encoding."}),"\n",(0,s.jsxs)(n.li,{children:["For example: ",(0,s.jsx)(n.code,{children:'mvsort(split("one,Two,30,4", ","))'})," results in ",(0,s.jsx)(n.code,{children:'["30", "4", "Two", "one"]'})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["You can use this function with an ",(0,s.jsx)(n.code,{children:"eval"})," command."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-6",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["The following command sorts the values in the ",(0,s.jsx)(n.code,{children:"fruits"})," field lexicographically."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval sorted_fruits=mvsort(split("banana,apple,mango,kiwi", ","))\n'})}),"\n",(0,s.jsx)(n.h3,{id:"use-case-example-6",children:"Use-Case Example"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Normalizing Field Values for Accurate Grouping"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem:"})," Multivalue fields with unordered entries can lead to inconsistent groupings or false mismatches. For instance, two rows with values ",(0,s.jsx)(n.code,{children:'"beta,alpha"'})," and ",(0,s.jsx)(n.code,{children:'"alpha,beta"'})," are semantically the same but differ byte-wise."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution:"})," To ensure consistent grouping and comparisons, the multivalue field can be sorted using ",(0,s.jsx)(n.code,{children:"mvsort"})," before applying further logic."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval tags=split("beta:alpha:gamma", ":") | eval sorted_tags=mvsort(tags)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"split"})," function creates a multivalue field ",(0,s.jsx)(n.code,{children:"tags"})," from a colon-delimited string."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mvsort"})," reorders the values in lexicographic (UTF-8) byte order: ",(0,s.jsx)(n.code,{children:'"alpha", "beta", "gamma"'}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.code,{children:"mvsort"})," ensures consistency across pipelines and helps avoid logic errors caused by value ordering mismatches."]}),"\n",(0,s.jsx)(n.h2,{id:"mvappendvalues",children:"mvappend(<values>)"}),"\n",(0,s.jsx)(n.h3,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"This function takes one or more values and returns a single multivalue result that contains all of the values. The values can be strings, multivalue fields, or single value fields."}),"\n",(0,s.jsx)(n.h3,{id:"usage-7",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["You can use this function with the ",(0,s.jsx)(n.code,{children:"eval"})," and ",(0,s.jsx)(n.code,{children:"where"})," commands, and as part of eval expressions."]}),"\n",(0,s.jsx)(n.h3,{id:"basic-examples",children:"Basic examples"}),"\n",(0,s.jsxs)(n.p,{children:["This example shows how to append two values, ",(0,s.jsx)(n.code,{children:"localhost"})," is a literal string value and ",(0,s.jsx)(n.code,{children:"srcip"})," is a field name."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval fullName=mvappend("localhost", srcip)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The following example shows how to use nested ",(0,s.jsx)(n.code,{children:"mvappend"})," functions."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The inner ",(0,s.jsx)(n.code,{children:"mvappend"})," function contains two values: ",(0,s.jsx)(n.code,{children:"localhost"})," is a literal string value and ",(0,s.jsx)(n.code,{children:"srcip"})," is a field name."]}),"\n",(0,s.jsxs)(n.li,{children:["The outer ",(0,s.jsx)(n.code,{children:"mvappend"})," function contains three values: the inner ",(0,s.jsx)(n.code,{children:"mvappend"})," function, ",(0,s.jsx)(n.code,{children:"destip"})," is a field name, and ",(0,s.jsx)(n.code,{children:"192.168.1.1"})," which is a literal IP address."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The results are placed in a new field called ",(0,s.jsx)(n.code,{children:"ipaddresses"}),", which contains the array ",(0,s.jsx)(n.code,{children:'["localhost", <values_in_scrip>, <values_in_destip>, "192.168.1.1"]'}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval ipaddresses=mvappend(mvappend("localhost", srcip), destip, "192.168.1.1")\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Note that the previous example generates the same results as the following example, which does not use a nested ",(0,s.jsx)(n.code,{children:"mvappend"})," function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval ipaddresses=mvappend("localhost", srcip, destip, "192.168.1.1")\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If the first value in the ",(0,s.jsx)(n.code,{children:"srcip"})," field is 203.0.113.0 and the first value in the ",(0,s.jsx)(n.code,{children:"destip"})," field is 203.0.113.255, the results look something like this:"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"time"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"ipaddresses"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"2024-11-19 16:43:31"}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["localhost ",(0,s.jsx)("br",{})," 203.0.113.0 ",(0,s.jsx)("br",{})," 203.0.113.255 ",(0,s.jsx)("br",{})," 192.168.1.1"]})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"mvzipmv_left-mv_right-delim",children:"mvzip(<mv_left>, <mv_right>, <delim>)"}),"\n",(0,s.jsx)(n.p,{children:"This function combines the values in two multivalue fields by pairing corresponding elements and joining them with a delimiter."}),"\n",(0,s.jsx)(n.h4,{id:"usage-8",children:"Usage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<mv_left>"})," and ",(0,s.jsx)(n.code,{children:"<mv_right>"})," must be multivalue fields."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<delim>"})," is an optional string literal specifying the delimiter to insert between paired values. If omitted, a comma (",(0,s.jsx)(n.code,{children:","}),") is used by default."]}),"\n",(0,s.jsxs)(n.li,{children:["You can use this function with an ",(0,s.jsx)(n.code,{children:"eval"})," command."]}),"\n",(0,s.jsxs)(n.li,{children:["This function behaves similarly to Python's ",(0,s.jsx)(n.code,{children:"zip()"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Values are zipped in order:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["First value of ",(0,s.jsx)(n.code,{children:"<mv_left>"})," with first value of ",(0,s.jsx)(n.code,{children:"<mv_right>"}),","]}),"\n",(0,s.jsx)(n.li,{children:"Second with second, and so on."}),"\n",(0,s.jsx)(n.li,{children:"If the lengths of the two fields differ, extra values from the longer field are ignored."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-7",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:'The following command joins two multivalue fields using space " " as the delimiter.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval nserver=mvzip(mvfield1, mvfield2, " ")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"use-case-example-7",children:"Use-Case Example"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Combining Host-Port Pairs into a Single Field"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem:"})," You have two multivalue fields, ",(0,s.jsx)(n.code,{children:"hosts"})," and ",(0,s.jsx)(n.code,{children:"ports"}),", and you want to pair each host with its corresponding port (e.g. ",(0,s.jsx)(n.code,{children:"host1:80"}),", ",(0,s.jsx)(n.code,{children:"host2:443"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution:"})," Use the ",(0,s.jsx)(n.code,{children:"mvzip"})," function with a colon (",(0,s.jsx)(n.code,{children:":"}),") delimiter to create a single multivalue field that merges the corresponding values."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval host_port=mvzip(hosts, ports, ":")\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"mvzip"})," function pairs values by position: ",(0,s.jsx)(n.code,{children:"hosts[0]"})," with ",(0,s.jsx)(n.code,{children:"ports[0]"}),", ",(0,s.jsx)(n.code,{children:"hosts[1]"})," with ",(0,s.jsx)(n.code,{children:"ports[1]"}),", etc."]}),"\n",(0,s.jsxs)(n.li,{children:["It joins each pair using the specified delimiter (",(0,s.jsx)(n.code,{children:":"})," in this case).","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If ",(0,s.jsx)(n.code,{children:'hosts = ["host1", "host2"]'})," and ",(0,s.jsx)(n.code,{children:'ports = ["80", "443"]'}),", the result is ",(0,s.jsx)(n.code,{children:'["host1:80", "host2:443"]'}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"The output is a new multivalue field that can be used for table displays, comparisons, or lookups."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To combine more than two fields, you can nest the ",(0,s.jsx)(n.code,{children:"mvzip"})," calls. For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"... | eval three_fields_zip=mvzip(mvzip(field1, field2), field3)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This creates multivalue strings like: ",(0,s.jsx)(n.code,{children:"value1,value2,value3"})]}),"\n",(0,s.jsx)(n.h2,{id:"mvfilterpredicate",children:"mvfilter(<predicate>)"}),"\n",(0,s.jsx)(n.p,{children:"This function filters the values in a multivalue field based on a Boolean expression. It evaluates each value in the field and retains only those that satisfy the given condition."}),"\n",(0,s.jsx)(n.h3,{id:"usage-9",children:"Usage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"<predicate>"})," parameter is a Boolean expression used to test each value in the multivalue field."]}),"\n",(0,s.jsxs)(n.li,{children:["The expression ",(0,s.jsx)(n.strong,{children:"must reference only one field"})," - specifically, the multivalue field being filtered."]}),"\n",(0,s.jsx)(n.li,{children:"If you try to reference another field in the predicate, the filter won't work and will return an empty result, but the query will still run without errors."}),"\n",(0,s.jsxs)(n.li,{children:["You can use ",(0,s.jsx)(n.code,{children:"mvfilter"})," within commands like ",(0,s.jsx)(n.code,{children:"eval"}),", ",(0,s.jsx)(n.code,{children:"fieldformat"}),", and ",(0,s.jsx)(n.code,{children:"where"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"function-behavior-3",children:"Function Behavior"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The function evaluates the Boolean expression for each value in the multivalue field."}),"\n",(0,s.jsxs)(n.li,{children:["Only values for which the expression evaluates to ",(0,s.jsx)(n.code,{children:"true"})," are retained in the result."]}),"\n",(0,s.jsxs)(n.li,{children:["NULL values are not included by default. To include NULL values, use ",(0,s.jsx)(n.code,{children:"OR isnull(<value>)"})," in your expression."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-8",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["Consider a multivalue field ",(0,s.jsx)(n.code,{children:"email"})," with the following values:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'"abc@example.com", "support@help.net", "team@org.org"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["To filter and retain only the email addresses ending in ",(0,s.jsx)(n.code,{children:".net"})," or ",(0,s.jsx)(n.code,{children:".org"}),", use:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval filtered_emails = mvfilter(match(email, "\\.net$") OR match(email, "\\.org$"))\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The result for ",(0,s.jsx)(n.code,{children:"filtered_emails"})," will be ",(0,s.jsx)(n.code,{children:'"support@help.net", "team@org.org"'}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"use-case-example-8",children:"Use-Case Example"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Filtering Valid Email Domains"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem:"})," You have a multivalue field containing various email addresses, and you want to retain only those from specific domains such as ",(0,s.jsx)(n.code,{children:".com"})," and ",(0,s.jsx)(n.code,{children:".org"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution:"})," Use the ",(0,s.jsx)(n.code,{children:"mvfilter"})," function with pattern matching conditions to keep only the relevant email values."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'... | eval emails = split(user_email, ",") | eval filtered = mvfilter(match(emails, "\\.com$") OR match(emails, "\\.org$")) | where mvcount(filtered) > 0 | sort ident | fields filtered, ident, city | head 5\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"split"})," function converts comma-separated email addresses into a multivalue field called ",(0,s.jsx)(n.code,{children:"emails"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"mvfilter"})," function retains only emails ending in ",(0,s.jsx)(n.code,{children:".com"})," or ",(0,s.jsx)(n.code,{children:".org"})," from the ",(0,s.jsx)(n.code,{children:"emails"})," field."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"where"})," clause filters results to show only records that have at least one valid email after filtering."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This method allows you to selectively filter multivalue fields based on complex conditions, enabling more targeted data analysis and processing."}),"\n",(0,s.jsx)(n.h2,{id:"mv_to_json_arraymv-infer_types",children:"mv_to_json_array(<mv>, <infer_types>)"}),"\n",(0,s.jsx)(n.p,{children:"This function converts a multivalue field into a JSON array string. It optionally infers the data types of the elements to produce correctly typed JSON values."}),"\n",(0,s.jsx)(n.h3,{id:"usage-10",children:"Usage"}),"\n",(0,s.jsx)(n.p,{children:"You can use this function with the eval and where commands, and as part of evaluation expressions with other commands."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<mv>"})," is the multivalue field"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<infer_types>"})," is an ",(0,s.jsx)(n.strong,{children:"optional"})," boolean expression (default: false)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"function-behavior-4",children:"Function Behavior"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If ",(0,s.jsx)(n.code,{children:"<infer_types>"})," is ",(0,s.jsx)(n.strong,{children:"false"})," (or omitted), each value is treated as a string and inserted into the JSON array with quotes preserved."]}),"\n",(0,s.jsxs)(n.li,{children:["If ",(0,s.jsx)(n.code,{children:"<infer_types>"})," is ",(0,s.jsx)(n.strong,{children:"true"}),", the function strips one level of outer quotes and tries to convert the value to an appropriate JSON data type (",(0,s.jsx)(n.code,{children:"number"}),", ",(0,s.jsx)(n.code,{children:"boolean"}),", ",(0,s.jsx)(n.code,{children:"null"}),", or string). If a value cannot be inferred, it is inserted as ",(0,s.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"The output is a single-valued string that is a valid JSON array."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-9",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["Suppose you have a multivalue field called ",(0,s.jsx)(n.code,{children:"readings"})," with the following values:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'"10", "12.5", "true", "null"'})}),"\n",(0,s.jsx)(n.p,{children:"Without inferring types:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-spl",children:"... | eval readings_json = mv_to_json_array(readings, false)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Result: ",(0,s.jsx)(n.code,{children:'["10", "12.5", "true", "null"]'})]}),"\n",(0,s.jsx)(n.p,{children:"With type inference:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-spl",children:"... | eval readings_json = mv_to_json_array(readings, 1=1)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Result: ",(0,s.jsx)(n.code,{children:"[10, 12.5, true, null]"})]}),"\n",(0,s.jsx)(n.h3,{id:"use-case-example-9",children:"Use-Case Example"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Formatting Data for External JSON Consumers"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem:"})," You want to export multivalue fields to downstream systems that expect a valid JSON array, with correct types like numbers and booleans\u2014not just strings."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution:"})," Use ",(0,s.jsx)(n.code,{children:"mv_to_json_array"})," with a boolean condition to serialize your multivalue field into a properly typed JSON array."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-spl",children:"... | eval json_payload = mv_to_json_array(metrics, true())\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"metrics"})," contains values like ",(0,s.jsx)(n.code,{children:'"5"'}),", ",(0,s.jsx)(n.code,{children:'"3.14"'}),", ",(0,s.jsx)(n.code,{children:'"true"'}),", ",(0,s.jsx)(n.code,{children:'"null"'})," as strings."]}),"\n",(0,s.jsxs)(n.li,{children:["The resulting array is: ",(0,s.jsx)(n.code,{children:"[5, 3.14, true, null]"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This function is essential when you need to control the structure and typing of JSON arrays emitted by Splunk for integration with APIs, dashboards, or logging systems."})]})}function h(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>r});var s=i(7294);const l={},t=s.createContext(l);function r(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);